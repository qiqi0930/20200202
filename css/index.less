@import './reset.min.less';
@import './swiper.min.less';
@import (reference) './common.less';

/* ==========animate中复制的样式代码块========= */
//为避免文件太大，所以没有把animate整个文件引进来
@keyframes bounceInLeft {

    0%,
    60%,
    75%,
    90%,
    to {
        animation-timing-function        : cubic-bezier(.215, .61, .355, 1)
    }

    0% {
        opacity          : 0;
        transform        : translate3d(-3000px, 0, 0)
    }

    60% {
        opacity          : 1;
        transform        : translate3d(25px, 0, 0)
    }

    75% {
        transform        : translate3d(-10px, 0, 0)
    }

    90% {
        transform        : translate3d(5px, 0, 0)
    }

    to {
        transform        : translateZ(0);
        opacity          : 1;
    }
}

@keyframes shake {

    0%,
    to {
        transform        : translateZ(0)
    }

    10%,
    30%,
    50%,
    70%,
    90% {
        transform        : translate3d(-10px, 0, 0)
    }

    20%,
    40%,
    60%,
    80% {
        transform        : translate3d(10px, 0, 0)
    }

    to {
        opacity: 1;
    }
}

@keyframes tada {
    0% {
        -webkit-transform: scaleX(1);
        transform        : scaleX(1)
    }

    10%,
    20% {
        -webkit-transform: scale3d(.9, .9, .9) rotate(-3deg);
        transform        : scale3d(.9, .9, .9) rotate(-3deg)
    }

    30%,
    50%,
    70%,
    90% {
        -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate(3deg);
        transform        : scale3d(1.1, 1.1, 1.1) rotate(3deg)
    }

    40%,
    60%,
    80% {
        -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate(-3deg);
        transform        : scale3d(1.1, 1.1, 1.1) rotate(-3deg)
    }

    to {
        -webkit-transform: scaleX(1);
        transform        : scaleX(1);
        opacity          : 1;
    }
}

@keyframes heartBeat {
    0% {
        -webkit-transform: scale(1);
        transform        : scale(1)
    }

    14% {
        -webkit-transform: scale(1.3);
        transform        : scale(1.3)
    }

    28% {
        -webkit-transform: scale(1);
        transform        : scale(1)
    }

    42% {
        -webkit-transform: scale(1.3);
        transform        : scale(1.3)
    }

    70% {
        -webkit-transform: scale(1);
        transform        : scale(1)
    }

    to {
        opacity: 1;
    }
}

@keyframes musicMove {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}

/* ==========基础样式========= */
html {
    //规定在750px的设计稿中：1REM = 100px
    font-size: 100px;
}

html,
body {
    height    : 100%;
    overflow  : hidden;
    background: #e4e4e4;
}

.container {
    margin   : 0 auto;
    max-width: 750px;
    height   : 100%;
}

.cubeBox,
.swiperBox {
    display: none;
    height : 100%;
}

/* ==========魔方区域========= */
.cubeBox {
    position       : relative;
    background     : url('../images/zf_cubeBg.jpg') no-repeat center center;
    background-size: cover;

    //提示文字
    .tip {
        width : 3.94rem;
        height: 0.44rem;
        .BG-IMAGE('zf_cubeTip.png');
        //===>
        // background     : url(../images/zf_cubeTip.png) no-repeat;
        // background-size: 100% 100%;
        .CENTER-X(3.94);
        bottom: .5rem;
    }

    //魔方盒子
    .cube {
        width : 5.1rem;
        height: 5.1rem;
        .CENTER(5.1, 5.1);

        li {
            position: absolute;
            top     : 0;
            left    : 0;
            width   : 100%;
            height  : 100%;

            img {
                width : 100%;
                height: 100%;
            }
        }
    }

    //魔方盒子的3D处理
    //1.给3D变形的变形元素所在的容器（舞台）设置视距，防止“一叶障目”
    perspective: 2000px;

    .cube {
        //2.给需要3D变形的元素设置3D变形特征
        transform-style: preserve-3d;
        // transform   : scale(.8) rotateX(-30deg) rotateY(-45deg);
        transition     : transform .3s linear;

        //3.控制每一个面的移动和旋转
        li:nth-child(1) {
            //前面
            transform: translateZ(2.55rem);
        }

        li:nth-child(2) {
            //后面
            transform: translateZ(-2.55rem) rotateY(180deg);
        }

        li:nth-child(3) {
            //左面
            transform: translateX(-2.55rem) rotateY(-90deg);
        }

        li:nth-child(4) {
            //右面
            transform: translateX(2.55rem) rotateY(90deg);
        }

        li:nth-child(5) {
            //上面
            transform: translateY(-2.55rem) rotateX(90deg);
        }

        li:nth-child(6) {
            //下面
            transform: translateY(2.55rem) rotateX(-90deg);
        }
    }
}

/* ==========滑屏区域========= */
.swiperBox {
    .returnBox {
        position: absolute;
        top     : .2rem;
        right   : .2rem;
        z-index : 999;
        width   : 0.64rem;
        height  : 0.75rem;
        .BG-IMAGE('zf_return.png');
    }

    .swiper-container,
    .swiper-slide {
        position: relative;
        height  : 100%; //宽高的百分比一定要保证其父级有固定宽高
        overflow: hidden;
    }

    .page1 {
        background : #fff;
        perspective: 2000px; //实现3D效果

        .baseInfo {
            box-sizing     : border-box;
            width          : 6rem;
            height         : 6.6rem;
            transform-style: preserve-3d;
            .CENTER(6, 6.6);

            dt,
            dd {
                box-sizing : border-box;
                height     : .6rem;
                line-height: .6rem;
                border-top : .02rem dashed rgba(255, 255, 255, .3);
                background : #8fbb4c;
                //下面3行是超出一行文本以省略号表示，不换行
                text-overflow: ellipsis;
                overflow     : hidden;
                white-space  : nowrap;
                font-size    : .28rem;
            }

            dt {
                text-align: center;
                font-size : .4rem;
                color     : yellow;
            }

            dd {
                position    : relative;
                padding-left: .66rem;

                em {
                    width      : 0.36rem;
                    height     : 0.42rem;
                    line-height: .42rem;
                    text-align : center;
                    color      : #fff;
                    font-size  : .2rem;
                    font-style : normal;
                    left       : .15rem;
                    z-index    : 999;
                    .BG-IMAGE('zf_outline.png');
                    .CENTER-Y(.42);
                }

                p {
                    position: relative; //相对于自己之前的位置定位
                    z-index : 999; //必须在定位存在的情况下才有效
                }
            }
        }
    }

    .page2 {
        background: #fff9c1;

        h3 {
            position   : absolute;
            top        : .5rem;
            left       : 0;
            width      : 100%;
            line-height: .9rem;
            text-align : center;
            font-size  : .6rem;
            font-weight: normal;
            font-family: Microsoft JhengHei;
            opacity    : 0;
        }

        img {
            opacity: 0;
            width  : 1rem;
            height : 1rem;
            .CENTER(1, 1);

            //找到page2中子元素的第一个，并且得是IMG才可以。所以在本例中，下面的选择器什么都选不中
            // .page2 img:nth-child(1){}
            //把page2中按照img进行分组，找到分组中的第一个
            // .page2 img:nth-of-type(1){}
            &            :nth-of-type(7) {
                width : 1.32rem;
                height: 1.7rem;
                .CENTER(1.32, 1.7);
            }
        }
    }

    //设置第二页的动画
    #page2 {
        h3 {
            animation: bounceInLeft 1s both;
            //both：运动完成后停留在最后一帧的位置
        }

        img {
            &:nth-of-type(7) {
                animation: shake 1s both;
            }

            &:nth-of-type(1) {
                margin-top: unit(-.5-(2.4), rem);
                //原本所有图片在中间，第一张图片向上飞240px。第一张图片原本的上边距是.5rem,向上飞再加上负的2.4rem
            }

            &:nth-of-type(2) {
                margin-top : -1.7rem;
                margin-left: 1.5rem;
            }

            &:nth-of-type(3) {
                margin-top : .7rem;
                margin-left: 1.5rem;
            }

            &:nth-of-type(4) {
                margin-top: 1.9rem;
            }

            &:nth-of-type(5) {
                margin-top : .7rem;
                margin-left: -2.5rem;
            }

            &:nth-of-type(6) {
                margin-top : -1.7rem;
                margin-left: -2.5rem;
            }

            transition: .5s;
            opacity   : 1;
            animation : tada 1s .5s infinite;
        }
    }

    .page3 {
        background: #e45454;

        .title {
            width : 3.82rem;
            height: 1.41rem;
            .CENTER-X(3.82);
            top    : .5rem;
            opacity: 0;
        }
    }

    #page3 {
        .title {
            animation: bounceInLeft 1s both;
        }
    }

    .page4 {
        background: #fac471;
    }

    .page5 {
        background: #fbffe8;
    }

    .page6 {
        background: #5975ff;
    }
}

/* 
*  滑屏页面中的帧动画
    1.先写每一页的结构和基础样式（写在.page$下）
    2.让所有后续需要运动的元素初始透明度为0
    3.所有运动的动画（大部分动画在animate.css中都可以找到，把最后一帧透明度设置为1）我们写在#page$下（原因是ID选择器优先级高）
    4.在swiper切换的时候，运动到当前页就给当前页设置一个ID = page$，其余页面的ID都移除掉即可
*/

/* ==========音乐区域========= */
.musicBox {
    .musicAudio {
        display: none;
    }

    .musicIcon {
        display : none;
        position: absolute;
        top     : .2rem;
        left    : .2rem;
        z-index : 999;
        width   : 0.6rem;
        height  : 0.6rem;
        .BG-IMAGE('music.svg');

        //=>musicIcon.move
        &.move {
            animation: musicMove 1s linear infinite;
        }
    }
}



/* 
*  考虑兼容性问题
例：在PC端想用css3的情况下兼容性需要考虑到：
.pic{
    -webkit-transform:rotate(180deg);
    -moz-transform   :rotate(180deg);
    -ms-transform    :rotate(180deg);
    -o-transform     :rotate(180deg);
    transform        :rotate(180deg);
} 

移动端的产品大都是webkit的内核的，所以要写两套：
-webkit-transform:rotate(180deg);
    transform    :rotate(180deg);
*/